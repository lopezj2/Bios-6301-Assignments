}
ecdf.pbb <- function(setting,int.precision=.0005,plot.dist=TRUE,save.ecdf.pbb=TRUE){
#results <- function(sims,int.precision=.0005,plot.dist=TRUE){
#par(mfrow=c(1,2),las=1)
n <- settings[setting,"n"]
p <- settings[setting,"p"]
# Percent of optimal balance bought back
xseq  <- seq(0,5,by=int.precision)
pbb <- function(ecdfxseq){
100 * sum(ecdfxseq           - ecdf.srsdddd(xseq)) * int.precision /
(sum(ecdf.batchdd(xseq) - ecdf.srsdddd(xseq)) * int.precision)
}
# summary results
batchdd <- apply(matrix(1:length(sim_ests)),1,function(x) collect.batchsrs(x,setting,"batch.d"))
srsdddd <- apply(matrix(1:length(sim_ests)),1,function(x) collect.batchsrs(x,setting,"srs.d"))
seqdEdd  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,setting,"seq.dE","ecdfx"))
seqdERd  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,setting,"seq.dER","ecdfx"))
seqdFdd  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,setting,"seq.dF","ecdfx"))
seqdFRd  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,setting,"seq.dFR","ecdfx"))
seqdFTIMd  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,setting,"seq.dFnoTDM","ecdfx"))
# ecdf
ecdf.batchdd <- ecdf(batchdd)
ecdf.seqdEdd <- ecdf(seqdEdd)
ecdf.seqdERd <- ecdf(seqdERd)
ecdf.seqdFdd <- ecdf(seqdFdd)
ecdf.seqdFRd <- ecdf(seqdFRd)
ecdf.seqdFTIMd <- ecdf(seqdFTIMd)
ecdf.srsdddd <- ecdf(srsdddd)
# plot sequential enrollment (1 at a time)
if(plot.dist){
if(save.ecdf.pbb) pdf(paste0(dirfig,setting,"v01",".pdf"))
plot(ecdf.srsdddd,do.points=FALSE,xlab="Distances (scaled)",ylab="",
main="",cex.main=.75, las=1,xlim=c(0,3))
#lines(xseq,pf(xseq,p,n-p),col="grey")
lines(ecdf.batchdd,col="red",cex=.25,do.points=FALSE)
lines(ecdf.seqdEdd,col="blue",cex=.25,do.points=FALSE)
lines(ecdf.seqdERd,col="green",cex=.25,do.points=FALSE)
lines(ecdf.seqdFdd,col="purple",cex=.25,do.points=FALSE)
lines(ecdf.seqdFRd,col="brown",cex=.25,do.points=FALSE)
lines(ecdf.seqdFTIMd,col="orange",cex=.25,do.points=FALSE)
legend("right",c("OSR - Single batch",
"Sequential - Empirical null",
"Sequential - Empirical null (ranks)",
paste0("Sequential - F(",p,",",n-p,") null"),
paste0("Sequential - F(",p,",",n-p,") null (ranks)"),
paste0("Sequential - F(",p,",",n-p,") null (TIM)"),
"Unrestricted",
paste0("F(",p,",",n-p,")")),
fill=c("red","blue","green","purple","brown","orange","black","grey"),bty="n")
if(save.ecdf.pbb) dev.off()
}
return(c(pbb.seqE =pbb(ecdf.seqdEdd(xseq)),
pbb.seqER=pbb(ecdf.seqdERd(xseq)),
pbb.seqF =pbb(ecdf.seqdFdd(xseq)),
pbb.seqFR=pbb(ecdf.seqdFRd(xseq)),
pbb.seqFTIM =pbb(ecdf.seqdFTIMd(xseq))))
}
for (set in settings[,"simname"]) print(ecdf.pbb(set,save.ecdf.pbb=FALSE))
sims$n30p4prev0N$simulations["seq.dFnoTDM",]$seq.dFnoTDM$TDMmatch
sims
sims$n30p4prev0N["seq.dFnoTDM",]$seq.dFnoTDM$TDMmatch
sims$n30p4prev0N["seq.dFnoTDM",]$seq.dFnoTDM$TDMmatch
sims$n30p4prev0N["seq.dFnoTDM",]$seq.dFnoTDM$TDMtrt
sims$n30p4prev0N["seq.dF",]$seq.dF$TDMmatch
sims$n30p4prev0N["seq.dF",]$seq.dF$TDMtrt
sims$n30p4prev0N["seq.dFR",]$seq.dFR$ecdfx
sims$n30p4prev0N["seq.dF",]$seq.dF$ecdfx
sim_ests = dir(dirests,full.names=TRUE)[grep('.RData',dir(dirests))]
batch.dists <- apply(matrix(1:length(sim_ests)),1,function(x) collect.batchsrs(x,settings[1,"simname"],"batch.d"))
srs.dists <- apply(matrix(1:length(sim_ests)),1,function(x) collect.batchsrs(x,settings[1,"simname"],"srs.d"))
seq.dE.dists  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,settings[1,"simname"],"seq.dE","ecdfx"))
seq.dER.dists <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,1,"seq.dER","ecdfx"))
seq.dF.dists  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,1,"seq.dF","ecdfx"))
seq.dFR.dists  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,1,"seq.dFR","ecdfx"))
seq.dFnoTDM.dists  <- apply(matrix(1:length(sim_ests)),1,function(x) collect.seq(x,1,"seq.dFnoTDM","ecdfx"))
dim(batch.dists)
batch.dists[,1:5]
apply(batch.dists,1,mean)
1/15
length(apply(batch.dists,1,mean))
sims$n30p4prev0N["batch.d",]
sims$n30p4prev0N["srs.d",]
sims$n30p4prev0N["batch.d",]
ecdf(sims$n30p4prev0N["batch.d",])
ecdf(sims$n30p4prev0N["batch.d",]$batch.d)
a=ecdf(sims$n30p4prev0N["batch.d",]$batch.d)
a
plot(a)
b=ecdf(sims$n30p4prev0N["srs.d",]$srs.d)
plot(b)
mean(a,b)
ecdf(sims$n30p4prev0N["seq.dE",]$seq.dE$ecdfx)
sims$n30p4prev0N["seq.dE",]$seq.dE$ecdfx
ecdf(apply(seqdEdd,1,mean))
ecdf(apply(seq.dE.dists,1,mean))
plot(ecdf(apply(seq.dE.dists,1,mean)))
lines(ecdf(seq.dE.dists,1,mean))
lines(ecdf(seq.dE.dists))
for (set in settings[,"simname"]) print(ecdf.pbb(set,save.ecdf.pbb=TRUE))
data("USArrests")
USArrests
USAccDeaths
data("USJudgeRatings")
USJudgeRatings
require(graphics)
pairs(USJudgeRatings, main = "USJudgeRatings data")
pairs(USJudgeRatings, main = "USJudgeRatings data")
data("attitude")
dim(attitude)
attitude
data("Seatbelts")
Seatbelts
data("UKDriverDeaths")
require(stats); require(graphics)
## work with pre-seatbelt period to identify a model, use logs
work <- window(log10(UKDriverDeaths), end = 1982+11/12)
par(mfrow = c(3, 1))
plot(work); acf(work); pacf(work)
par(mfrow = c(1, 1))
(fit <- arima(work, c(1, 0, 0), seasonal = list(order = c(1, 0, 0))))
z <- predict(fit, n.ahead = 24)
ts.plot(log10(UKDriverDeaths), z$pred, z$pred+2*z$se, z$pred-2*z$se,
lty = c(1, 3, 2, 2), col = c("black", "red", "blue", "blue"))
## now see the effect of the explanatory variables
X <- Seatbelts[, c("kms", "PetrolPrice", "law")]
X[, 1] <- log10(X[, 1]) - 4
arima(log10(Seatbelts[, "drivers"]), c(1, 0, 0),
seasonal = list(order = c(1, 0, 0)), xreg = X)
data("AirPassengers")
AirPassengers
data("HairEyeColor")
HairEyeColor
data("InsectSprays")
InsectSprays
data("JohnsonJohnson")
JohnsonJohnson
data("Titanic")
Titanic
data("UCBAdmissions")
UCBAdmissions
data("USAccDeaths")
USAccDeaths
data("warpbreaks")
warpbreaks
data("volcano")
volcano
f<- function(x) cos(x)-x
fp<- function(x) -sin(x)-1
secant <- function (f, x0= 0, x1=1, tol = 1e-7, maxiter = 1e3, print = TRUE) {
ptm <- proc.time()
i <- 1
while(abs(f(x1)) > tol && i < maxiter) {
x2 <-x1 - f(x1)*(x1-x0)/(f(x1)-f(x0))
x0 <- x1
x1 <- x2
i <- i + 1
}
if(i==maxiter) {
return(list("iter" = i, "root" = NULL))
} else {
return(list("iter" = i, "root" = x1))
}
}
newton <- function (guess, f, fp, tol=1e-7, maxiter = 1000, print = TRUE) {
ptm <- proc.time()
i <- 1
while(abs(f(guess))> tol && i < maxiter) {
guess <- guess - f(guess)/fp(guess)
i <- i + 1
guess
}
if(i==maxiter) {
return(list("iter" = i, "root" = NULL))
} else {
return(list("iter" = i, "root" = guess))
}
}
secant(f, 0, 1)
newton(1, f, fp)
secant.time<- system.time(for (j in 1:1e4) secant(f, 0, 1))['elapsed']
newton.time<- system.time(for (j in 1:1e4) newton(1, f, fp))['elapsed']
secant.time-newton.time
playcraps <- function () {
roll1 <- sum(ceiling(6*runif(2)))
sequence <- roll1
over <- FALSE
if(roll1 %in% c(7,11)) {
outcome <- "win"
over <- TRUE
}
while (over == FALSE) {
roll2 <- sum(ceiling(6*runif(2)))
sequence <- append(sequence, roll2)
if (roll2 == roll1) {
outcome <- "win"
over <- TRUE
}
if (roll2 %in% c(7,11)) {
outcome <- "loss"
over <- TRUE
}
}
return(list(outcome = outcome, sequence = sequence))
}
playlotsofcraps <- function (n, seed=100) {
set.seed(seed)
mysesh <- numeric(n)
for (i in 1:n) {
mysesh[i]<- playcraps()$outcome
}
return(factor(mysesh))
}
set.seed(100)
playcraps()
playcraps()
playcraps()
#alternatively
playlotsofcraps(3, 100)
for (i in 0:1e4) {
if(all(playlotsofcraps(10, i) == 'win')==TRUE) {
print(paste("Found one!! The lucky seed is", i))
good.seed <- i
break
}
}
playlotsofcraps(10, seed = 880)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
nArgs <- sapply(names(funs), FUN=function(i) length(formals(i)))
names(funs)[nArgs == max(nArgs)]
sum(nArgs == 0)
rm(list=ls())
d = .6
x1 = rnorm(1000,mean=10)
x2 = rnorm(1000,mean=15)
xmix = d * x1 + (1-d) * x2
hist(xmix)
x1 = rnorm(d*1000,mean=10)
x2 = rnorm((1-d)*1000,mean=15)
xmix2 = c(x1,x2)
hist(xmix2)
rm(list=ls())
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
c <- c()
for (i in 1:length(funs)) {
x <- length(as.list(args(funs[[i]])))
c[i] <- x
}
ma <- which.max(c)
funs[[ma]]
tru <- c()
for (i in 1:length(funs)) {
tru[i] <- (c[i] == 0)
}
length(tru[tru==TRUE])
c()
tru
c()
c
sum(c==0)
ma
funs[[ma]]
table(c)
c <- c()
for (i in 1:length(funs)) {
x <- length(formals(funs[[i]]))
c[i] <- x
}
ma <- which.max(c)
funs[[ma]]
tru <- c()
for (i in 1:length(funs)) {
tru[i] <- (c[i] == 0)
}
length(tru[tru==TRUE])
c()
c <- c()
c
c(1)
?sigma
C  <- matrix(c(10^-5, 0, 0, 10^-5),nrow=2,byrow=TRUE)
C
mean(2,3)
library(mvtnorm)
2**3
?rWishart
?rgamma
require(MCMCpack)
library(gdata)
library(Hmisc)
library(rms)
# Read in files
server <- "/Volumes/webdav/Sites/sprint-challenge/documentLibrary/data/"
bl  <- readRDS(paste0(server,"baseline.rds"))
bp  <- readRDS(paste0(server,"bp.rds"))
out <- readRDS(paste0(server,"outcomes.rds"))
rt  <- readRDS(paste0(server,"retention.rds"))
sf  <- readRDS(paste0(server,"safety.rds"))
# Key variables for figure 2: sbp over time per trt group
head(bp) # maskid, sbp
head(bl) # maskid, intensive (0=no, 1=yes)
# merge intervention (intensive) to bp
bpi <- merge(bp, bl[,c("maskid","intensive")], by="maskid")
# mean and sd of sbp by time and intervention group
# Note: what is time RZ?
means <- tapply(bpi$sbp,INDEX=list(bpi$intensive,bpi$visitcode),mean,na.rm=TRUE)
sds   <- tapply(bpi$sbp,INDEX=list(bpi$intensive,bpi$visitcode),sd,na.rm=TRUE)
ns    <- table(bpi$intensive,bpi$visitcode)
ses   <- sds / sqrt(ns)
meds  <- tapply(bpi$n_bpclasses,INDEX=list(bpi$intensive,bpi$visitcode),mean,na.rm=TRUE)
35+1263
(35+1263)/(2*65986)
"lubridate" %in% rownames(installed.packages()) == FALSE
haart<-read.csv('https://raw.githubusercontent.com/fonnesbeck/Bios6301/master/datasets/haart.csv',stringsAsFactors = F)
haart[,'last.visit']<-as.Date(haart[,'last.visit'],"%m/%d/%y")
haart[,'init.date']<-as.Date(haart[,'init.date'],"%m/%d/%y")
haart[,'date.death']<-as.Date(haart[,'date.death'],"%m/%d/%y")
#1. counts of year from 'init.date'
table(format(haart[,'init.date'],"%Y"))
haart[,'deathinyear']<-rep(0,nrow(haart))
for (i in 1:nrow(haart)) {
if (!is.na(haart[i,'date.death'])){
if ( (haart[i,'date.death'] - haart[i,'init.date']) <= 365) {
haart[i,'deathinyear']<-1
}
}
}
#92 died in 1 year
sum(haart[,'deathinyear'])
haart[,'followup']<-numeric(nrow(haart))
for (i in 1:nrow(haart)) {
if (!is.na(haart[i,'date.death']) && !is.na(haart[i,'last.visit']) ){
haart[i,'followup']<-min( (haart[i,'date.death']-haart[i,'init.date']), (haart[i,'last.visit']-haart[i,'init.date'])  )
}
else if ( is.na(haart[i,'date.death']) && !is.na(haart[i,'last.visit']) ){
haart[i,'followup']<-(haart[i,'last.visit']-haart[i,'init.date'])
}
else if ( !is.na(haart[i,'date.death']) && is.na(haart[i,'last.visit']) ){
haart[i,'followup']<-(haart[i,'date.death']-haart[i,'init.date'])
}
}
haart[,'followup'][haart[,'followup']>365]<-365
#see the quantile
quantile(haart[,'followup'])
haart[,'loss']<-numeric(nrow(haart))
for (i in 1:nrow(haart)){
if ( (haart[i,'death']==0) && (haart[i,'last.visit']-haart[i,'init.date'])<=365 ){
haart[i,'loss']=1
}
}
table(haart[,'loss'])
setwd("~/bios301grading/lopez-homework")
haart <- read.csv('haart.csv', stringsAsFactors = FALSE)
attach(haart)
haart[,"init.date"] <- as.Date(haart[,"init.date"], format = '%m/%d/%y')
haart[,"last.visit"] <- as.Date(haart[,"last.visit"], format = '%m/%d/%y')
haart[,"date.death"] <- as.Date(haart[,"date.death"], format = '%m/%d/%y')
table(format(haart[,'init.date'], '%Y'))
haart[,'year.dead'] <- rep(0,1000)
for(i in seq(nrow(haart))) {
if(!is.na(haart[i,'date.death'])) {
if(difftime(haart[i,'date.death'], haart[i,'init.date'],units='days') <= 365){
haart[i,'year.dead'] <- 1
}
}
}
length(which(haart[,'year.dead'] == 1))
haart[,'followup'] <- rep(0,1000)
for(i in seq(nrow(haart))) {
if(!is.na(haart[i,'last.visit'])) {
haart[i,'followup'] <- difftime(haart[i,'last.visit'],haart[i,'init.date'],units='days')
}
else {
haart[i,'followup'] <- difftime(haart[i,'date.death'],haart[i,'init.date'],units='days')
}
if(haart[i,'followup'] >= 365) {
haart[i,'followup'] <- 365
}
}
quantile(haart[,'followup'])
haart[,'ltf'] <- rep(0, nrow(haart))
for(i in seq(nrow(haart))) {
if(is.na(haart[i,'date.death'])) {
if(difftime(haart[i,'last.visit'], haart[i,'init.date'], units='days') >= 365) {
haart[i,'ltf'] <- 1
}
}
}
length(which(haart[,'ltf'] == 1))
haart[,'ltf'] <- rep(0, nrow(haart))
for(i in seq(nrow(haart))) {
if(!(haart[i,'date.death'])) {
if(difftime(haart[i,'last.visit'], haart[i,'init.date'], units='days') >= 365) {
haart[i,'ltf'] <- 1
}
}
}
haart[,'ltf'] <- rep(0, nrow(haart))
for(i in seq(nrow(haart))) {
if(!(haart[i,'death'])) {
if(difftime(haart[i,'last.visit'], haart[i,'init.date'], units='days') >= 365) {
haart[i,'ltf'] <- 1
}
}
}
length(which(haart[,'ltf'] == 1))
(haart[i,'death']
)
head(haart$death)
head(!haart$death)
sum(haart$followup<365 & !haart$death)
sum(haart$followup<365 & !haart$death)
table(is.na(haart$date.death),haart$death,ifany=TRUE)
sum(haart$followup<365 & !haart$death)
table(is.na(haart$date.death),haart$death)
sum(haart$followup<365 & !haart$death)
table(is.na(haart$date.death),haart$death,ifany=TRUE)
?table
sum(haart$followup<365 & !haart$death)
table(is.na(haart$date.death),haart$death,useNA="ifany")
all.reg <- strsplit(haart[,'init.reg'], ',')
all.reg <- unlist(all.reg)
all.reg <- unique(all.reg)
row.reg <- strsplit(haart[,'init.reg'], ',')
user.reg <- sapply(all.reg, function(j) sapply(row.reg, function(i) j %in% i))
colSums(user.reg)
haart <- cbind(haart, user.reg)
haart2 <- read.csv('haart2.csv', stringsAsFactors = FALSE)
haart2[,"init.date"] <- as.Date(haart2[,"init.date"], format = '%m/%d/%y')
haart2[,"last.visit"] <- as.Date(haart2[,"last.visit"], format = '%m/%d/%y')
haart2[,"date.death"] <- as.Date(haart2[,"date.death"], format = '%m/%d/%y')
all.reg2 <- strsplit(haart2[,'init.reg'], ',')
all.reg2 <- unlist(all.reg2)
all.reg2 <- unique(all.reg2)
row.reg2 <- strsplit(haart2[,'init.reg'], ',')
user.reg2 <- sapply(all.reg, function(j) sapply(row.reg2, function(i) j %in% i))
haart2 <- cbind(haart2, user.reg2)
haart <- rbind(haart, haart2)
rm(list=ls())
haart<-read.csv('haart.csv')
haart[,'last.visit'] <- as.POSIXct(haart[,'last.visit'], format="%m/%d/%y")
haart[,'init.date'] <- as.POSIXct(haart[,'init.date'], format="%m/%d/%y")
haart[,'date.death'] <- as.POSIXct(haart[,'date.death'], format="%m/%d/%y")
init.date.year<-sub("([0-9]{4})-([0-9]{2})-([0-9]{2})","\\1",haart[,'init.date'])
table(init.date.year)
time.diff<-haart[,'date.death']-haart[,'init.date']
haart[,'death.within.1year']<-ifelse(time.diff<=365,1,0)
table(haart[,'death.within.1year'])
fut.visit<-difftime(haart[,'last.visit'], haart[,'init.date'], units="days")
fut.visit
ifelse(fut.visit>365,365,fut.visit)
fut.visit<-ifelse(fut.visit>365,365,fut.visit)
fut.death<-difftime(haart[,'date.death'], haart[,'init.date'], units="days")
fut.death
ifelse(fut.death>365,365,fut.death)
fut.death<-ifelse(fut.death>365,365,fut.death)
attach(haart)
followup.time<-0
is.na(fut.death
)
for (i in 1:nrow(haart)) {
if (is.na(fut.death[i])) {
followup.time[i]=fut.visit[i]
} else {
followup.time[i]=min(fut.visit[i],fut.death[i])
}
}
followup.time
ceiling(followup.time)
haart[,'fut']<-ceiling(followup.time)
quantile(followup.time,na.rm=T)
quantile(followup.time,na.rm=F)
quantile(followup.time)
quantile(followup.time,na.rm=TRUE)
fut.visit
x <- haart
x[,'followup'] <- as.numeric(as.Date(apply(x[,c('date.death','last.visit')], MARGIN=1, min, na.rm=TRUE)) - x[,'init.date'], units='days')
apply(x[,c('date.death','last.visit')], MARGIN=1, min, na.rm=TRUE)
table(is.na(x$date.death),is.na(x$last.visit))
table(is.na(fut.visit),is.na(fut.death))
table(is.na(fut.death),is.na(fut.vist))
table(is.na(fut.death),is.na(fut.visit))
table(is.na(followup.time))
table(death=is.na(x$date.death),visit=is.na(x$last.visit))
followup.time<-0
for (i in 1:nrow(haart)) {
if (is.na(fut.death[i])) {
followup.time[i]=fut.visit[i]
} else {
followup.time[i]=min(fut.visit[i],fut.death[i],na.rm=TRUE)
}
}
haart[,'fut']<-ceiling(followup.time)
quantile(followup.time,na.rm=TRUE)
fut.visit<-difftime(haart[,'last.visit'], haart[,'init.date'], units="days")
fut.visit<-ifelse(fut.visit>365,365,fut.visit)
fut.death<-difftime(haart[,'date.death'], haart[,'init.date'], units="days")
fut.death<-ifelse(fut.death>365,365,fut.death)
attach(haart)
followup.time<-0
for (i in 1:nrow(haart)) {
if (is.na(fut.death[i])) {
followup.time[i]=fut.visit[i]
} else {
followup.time[i]=min(fut.visit[i],fut.death[i])
}
}
haart[,'fut']<-ceiling(followup.time)
quantile(followup.time,na.rm=TRUE)
table(is.na(fut.death),is.na(fut.visit))
table(is.na(followup.time))
